import java.util.*;
import java.math.*;

public class Multiplication {

    public static void main(String[] arg){
        String num1 = arg[0];
        String num2 = arg[1];

        System.out.println(Arrays.toString(parseToArray(num1)));
        System.out.println(Arrays.toString(parseToArray(num2)));

        String result = arrayToString(karatsuba(parseToArray(num1), parseToArray(num2)));
        System.out.println("result is:" + result);
    }

    private static int[] karatsuba(int[] num1, int[] num2) {
        if(num1.length < 2 || num2.length < 2) {
            return parseToArray(String.valueOf(num1[0] * num2[0]));
        }

        int m = num1.length / 2;
        System.out.println("m is " + m);

        int[] a = new int[m];
        int[] b = new int[m];
        int[] c = new int[m];
        int[] d = new int[m];

        System.arraycopy(num1, 0, a, 0, a.length);
        System.arraycopy(num1, a.length, b, 0, b.length);
        System.arraycopy(num2, 0, c, 0, c.length);
        System.arraycopy(num2, c.length, d, 0, d.length);

        int[] step1 = karatsuba(a, c);
        int[] step2 = karatsuba(b, d);
        int[] step3 = step3(step1, step2, a, b, c, d);

        BigInteger ac = new BigInteger(arrayToString(step1));
        System.out.println("ac = " + ac.toString());
        BigInteger bd = new BigInteger(arrayToString(step2));
        System.out.println("bd = " + bd.toString());
        BigInteger adbc = new BigInteger(arrayToString(step3));
        adbc = adbc.subtract(ac).subtract(bd);
        System.out.println("ad + bc = " + adbc.toString());
        
        BigInteger firstRow = (ac.multiply(BigInteger.TEN.pow(m * 2 * 2)));
        System.out.println(firstRow.toString());
        BigInteger lastRow = BigInteger.TEN.pow(m * 2).multiply(adbc);
        System.out.println(bd.toString());
        System.out.println(lastRow.toString());
        BigInteger result = firstRow.add(lastRow).add(bd);

        return parseToArray(result.toString());
    }

    private static int[] step3(int[] step1, int[] step2, int[] a, int[] b, int[] c, int[] d) {
        int[] ac = step1;
        int[] bd = step2;
        int[] ad = karatsuba(a, d);
        int[] bc = karatsuba(b, c);

        System.out.println("ad = " + Arrays.toString(ad));
        System.out.println("bc = " + Arrays.toString(bc));

        return parseToArray(new BigInteger(arrayToString(ac))
                .add(new BigInteger(arrayToString(bd)))
                .add(new BigInteger(arrayToString(ad)))
                .add(new BigInteger(arrayToString(bc))).toString());
    }

    private static int[] parseToArray(String arg) {
        int arrSize = arg.length() / 2 + 1;

        if(arg.length() % 2 == 0) {
            arrSize = arg.length() / 2;
        }

        int[] arr = new int[arrSize];

        String remainder = arg;

        for(int i = 0; i < arrSize; i++) {

            if(remainder.length() > 1) {

                arr[i] = Integer.valueOf(remainder.substring(0,2));

                remainder = remainder.substring(2, remainder.length());
            } else if(remainder.length() > 0) {
                arr[i] = Integer.valueOf(remainder);
            }

            if(remainder.startsWith("0")) {
                arr[i] = arr[i] * 10;
                remainder = remainder.substring(1, remainder.length());
            }
        }

        if(arr[arr.length - 1] == 0) {
            int[] newArr = new int[arr.length - 1];
            System.arraycopy(arr, 0, newArr, 0, newArr.length);
            arr = newArr;
        }

        return arr;
    }

    private static String arrayToString(int[] arr) {
        String result = "";
        for(int i = 0; i < arr.length; i++) {
            result+= String.valueOf(arr[i]);
        }
        return result;
    }
}
